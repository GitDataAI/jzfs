//! `SeaORM` Migration, @generated by sea-orm-cli 1.1.14

use sea_orm_migration::prelude::ColumnDef;
use sea_orm_migration::prelude::Table;
use sea_orm_migration::prelude::*;

#[derive(DeriveMigrationName)]
pub struct Migration;

#[async_trait::async_trait]
impl MigrationTrait for Migration {
    async fn up(&self, manager: &SchemaManager) -> Result<(), DbErr> {
        // 修改refs_uid字段类型为uuid
        manager
            .alter_table(
                Table::alter()
                    .table(GitCommit::Table)
                    .drop_column(GitCommit::RefsUid)
                    .add_column(ColumnDef::new(GitCommit::RefsUid).uuid().not_null())
                    .to_owned(),
            )
            .await?;

        // 修改author字段类型为text
        manager
            .alter_table(
                Table::alter()
                    .table(GitCommit::Table)
                    .drop_column(GitCommit::Author)
                    .add_column(ColumnDef::new(GitCommit::Author).uuid().null())
                    .to_owned(),
            )
            .await?;

        // 修改committer字段类型为text
        manager
            .alter_table(
                Table::alter()
                    .table(GitCommit::Table)
                    .drop_column(GitCommit::Committer)
                    .add_column(ColumnDef::new(GitCommit::Committer).uuid().null())
                    .to_owned(),
            )
            .await?;

        // 修改content字段为可空
        manager
            .alter_table(
                Table::alter()
                    .table(GitCommit::Table)
                    .modify_column(ColumnDef::new(GitCommit::Content).text().null())
                    .to_owned(),
            )
            .await
    }

    async fn down(&self, manager: &SchemaManager) -> Result<(), DbErr> {
        // 恢复refs_uid字段类型为string
        manager
            .alter_table(
                Table::alter()
                    .table(GitCommit::Table)
                    .drop_column(GitCommit::RefsUid)
                    .add_column(ColumnDef::new(GitCommit::RefsUid).string().not_null())
                    .to_owned(),
            )
            .await?;

        // 恢复author字段类型为uuid
        manager
            .alter_table(
                Table::alter()
                    .table(GitCommit::Table)
                    .drop_column(GitCommit::Author)
                    .add_column(ColumnDef::new(GitCommit::Author).uuid().null())
                    .to_owned(),
            )
            .await?;

        // 恢复committer字段类型为uuid
        manager
            .alter_table(
                Table::alter()
                    .table(GitCommit::Table)
                    .drop_column(GitCommit::Committer)
                    .add_column(ColumnDef::new(GitCommit::Committer).uuid().null())
                    .to_owned(),
            )
            .await?;

        // 恢复content字段为非空
        manager
            .alter_table(
                Table::alter()
                    .table(GitCommit::Table)
                    .modify_column(ColumnDef::new(GitCommit::Content).text().not_null())
                    .to_owned(),
            )
            .await
    }
}

#[derive(Iden)]
enum GitCommit {
    Table,
    RefsUid,
    Author,
    Committer,
    Content,
}
