name: Build and Push

on:
  workflow_call:
    secrets:
      DOCKER_USERNAME:
        required: true
      DOCKER_PASSWORD:
        required: true

jobs:
  build:
    name: Build
    runs-on: [self-hosted]
    outputs:
      version: "${{ steps.version.outputs.version }}"

    steps:
      - name: Checkout code
        uses: actions/checkout@v3


      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2.2.1

      - name: Base Tool
        run: |
          sudo apt update \
          && sudo apt install build-essential openssl libssl-dev pkg-config -y \
          && sudo apt install cmake gcc -y

      - name: Build project
        run: |
          export ALL_PORT=80
          cargo build --release --workspace

      - name: Get version
        id: version
        run: |
          if [[ -n "$GITHUB_REF" && "$GITHUB_REF" == "refs/tags/"* ]]; then
            echo "::set-output name=version::${GITHUB_REF/refs\/tags\//}"
          else
            echo "::set-output name=version::${{ github.sha }}"
          fi

  push-images:
    name: Build and Push Docker Images
    needs: build
    runs-on: self-hosted
    strategy:
      matrix:
        image:
          - { name: migrator, dockerfile: ./docker/migrator.Dockerfile }
          - { name: gateway, dockerfile: ./docker/gateway.Dockerfile }
          - { name: gitdata-auth, dockerfile: ./docker/auth.Dockerfile }
          - { name: gitdata-mq, dockerfile: ./docker/mq.Dockerfile }
          - { name: gitdata-user, dockerfile: ./docker/user.Dockerfile }

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          registry: docker.io

      - name: Build and Push ${{matrix.image.name}}
        run: |
          docker build -t gitdatateam/${{matrix.image.name}}:${{ needs.build.outputs.version }} -f ${{matrix.image.dockerfile}} .
          docker push gitdatateam/${{matrix.image.name}}:${{ needs.build.outputs.version }}
